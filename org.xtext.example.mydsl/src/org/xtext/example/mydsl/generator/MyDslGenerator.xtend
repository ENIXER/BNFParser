/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess

import org.xtext.example.mydsl.myDsl.Rule
import org.xtext.example.mydsl.myDsl.Model
import org.xtext.example.mydsl.myDsl.Expression
import org.xtext.example.mydsl.myDsl.Term
import org.xtext.example.mydsl.myDsl.Element
import org.xtext.example.mydsl.myDsl.RuleCall

class MyDslGenerator implements IGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		for (m : resource.allContents.toIterable.filter(Model)) {
			fsa.generateFile("model.g", m.compile)
		}
	}

	def compile(Model m) '''
		grammar CSV;
				
		 «FOR r : m.rules»
			«r.compile»
		 «ENDFOR»
	'''

	def compile(Rule r) '''
		«r.name» : «r.expression.compile» ;
	'''

	def compile(Expression exp) '''
		«FOR e : exp.elements»«e.compile» | «ENDFOR»
	'''

	def compile(Element e) '''
		«FOR t : e.terms»
			«t.compile»
		«ENDFOR»
	'''

	def compile(Term t) '''
		«FOR r : t.RCall»
			«r.compile»
		«ENDFOR»
	'''

	def compile(RuleCall r) '''
		«r.ref.name»
	'''
}

/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess

import org.xtext.example.mydsl.myDsl.Rule
import org.xtext.example.mydsl.myDsl.Model
import org.xtext.example.mydsl.myDsl.Expression

class MyDslGenerator implements IGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		for (m : resource.allContents.toIterable.filter(Model)) {
			fsa.generateFile(m.gram.gname+".g4", m.compile)
			fsa.generateFile("antlr.java", "public")
		}
	}

	def compile(Model m) '''
	grammar «m.gram.gname»;
			
	«FOR r : m.rules»«IF Character.isLowerCase(r.name.charAt(0))»«r.compile»«ENDIF»«ENDFOR»'''

	def compile(Rule r) '''«r.name»:
	«r.expression.compile»;
	'''

	def compile(Expression exp) '''«FOR ele : exp.elements»«FOR t : ele.terms»«FOR r : t.RCall»«IF !exp.elements.head.
		equals(ele) && ele.terms.head.equals(t)»| «ENDIF»«r.ref.name» «ENDFOR»«ENDFOR»«ENDFOR»'''
}

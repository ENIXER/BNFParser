/*
* generated by Xtext
*/
package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cGrammarParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cRulesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRulesRuleParserRuleCall_1_0 = (RuleCall)cRulesAssignment_1.eContents().get(0);
		
		//Model:
		//	Grammar rules+=Rule*;
		public ParserRule getRule() { return rule; }

		//Grammar rules+=Rule*
		public Group getGroup() { return cGroup; }

		//Grammar
		public RuleCall getGrammarParserRuleCall_0() { return cGrammarParserRuleCall_0; }

		//rules+=Rule*
		public Assignment getRulesAssignment_1() { return cRulesAssignment_1; }

		//Rule
		public RuleCall getRulesRuleParserRuleCall_1_0() { return cRulesRuleParserRuleCall_1_0; }
	}

	public class GrammarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Grammar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGrammarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cGramAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGramIDTerminalRuleCall_1_0 = (RuleCall)cGramAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Grammar:
		//	"grammar" gram=ID ";";
		public ParserRule getRule() { return rule; }

		//"grammar" gram=ID ";"
		public Group getGroup() { return cGroup; }

		//"grammar"
		public Keyword getGrammarKeyword_0() { return cGrammarKeyword_0; }

		//gram=ID
		public Assignment getGramAssignment_1() { return cGramAssignment_1; }

		//ID
		public RuleCall getGramIDTerminalRuleCall_1_0() { return cGramIDTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Rule:
		//	name=ID ":" exp=Expression ";";
		public ParserRule getRule() { return rule; }

		//name=ID ":" exp=Expression ";"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//exp=Expression
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_2_0() { return cExpExpressionParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsElementParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElementsElementParserRuleCall_1_1_0 = (RuleCall)cElementsAssignment_1_1.eContents().get(0);
		
		//Expression:
		//	elements+=Element ("|" elements+=Element)*;
		public ParserRule getRule() { return rule; }

		//elements+=Element ("|" elements+=Element)*
		public Group getGroup() { return cGroup; }

		//elements+=Element
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }

		//Element
		public RuleCall getElementsElementParserRuleCall_0_0() { return cElementsElementParserRuleCall_0_0; }

		//("|" elements+=Element)*
		public Group getGroup_1() { return cGroup_1; }

		//"|"
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }

		//elements+=Element
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }

		//Element
		public RuleCall getElementsElementParserRuleCall_1_1_0() { return cElementsElementParserRuleCall_1_1_0; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Assignment cTermsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTermsTermParserRuleCall_0 = (RuleCall)cTermsAssignment.eContents().get(0);
		
		//Element:
		//	terms+=Term+;
		public ParserRule getRule() { return rule; }

		//terms+=Term+
		public Assignment getTermsAssignment() { return cTermsAssignment; }

		//Term
		public RuleCall getTermsTermParserRuleCall_0() { return cTermsTermParserRuleCall_0; }
	}

	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cRcallAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cRcallRuleCallParserRuleCall_0_0 = (RuleCall)cRcallAssignment_0.eContents().get(0);
		private final Assignment cBexpAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cBexpBracketsExpParserRuleCall_1_0 = (RuleCall)cBexpAssignment_1.eContents().get(0);
		private final Assignment cKwordAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cKwordKeywordParserRuleCall_2_0 = (RuleCall)cKwordAssignment_2.eContents().get(0);
		
		//Term:
		//	rcall=RuleCall | bexp=BracketsExp | kword=Keyword;
		public ParserRule getRule() { return rule; }

		//rcall=RuleCall | bexp=BracketsExp | kword=Keyword
		public Alternatives getAlternatives() { return cAlternatives; }

		//rcall=RuleCall
		public Assignment getRcallAssignment_0() { return cRcallAssignment_0; }

		//RuleCall
		public RuleCall getRcallRuleCallParserRuleCall_0_0() { return cRcallRuleCallParserRuleCall_0_0; }

		//bexp=BracketsExp
		public Assignment getBexpAssignment_1() { return cBexpAssignment_1; }

		//BracketsExp
		public RuleCall getBexpBracketsExpParserRuleCall_1_0() { return cBexpBracketsExpParserRuleCall_1_0; }

		//kword=Keyword
		public Assignment getKwordAssignment_2() { return cKwordAssignment_2; }

		//Keyword
		public RuleCall getKwordKeywordParserRuleCall_2_0() { return cKwordKeywordParserRuleCall_2_0; }
	}

	public class BracketsExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BracketsExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_0_1 = (RuleCall)cGroup_0_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cPlusSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//BracketsExp:
		//	("(" Expression ")" | "[" Expression "]") ("+" | "*")?;
		public ParserRule getRule() { return rule; }

		//("(" Expression ")" | "[" Expression "]") ("+" | "*")?
		public Group getGroup() { return cGroup; }

		//"(" Expression ")" | "[" Expression "]"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"(" Expression ")"
		public Group getGroup_0_0() { return cGroup_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0_0() { return cLeftParenthesisKeyword_0_0_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0_0_1() { return cExpressionParserRuleCall_0_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_0_2() { return cRightParenthesisKeyword_0_0_2; }

		//"[" Expression "]"
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_1_0() { return cLeftSquareBracketKeyword_0_1_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0_1_1() { return cExpressionParserRuleCall_0_1_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_0_1_2() { return cRightSquareBracketKeyword_0_1_2; }

		//("+" | "*")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"+"
		public Keyword getPlusSignKeyword_1_0() { return cPlusSignKeyword_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}

	public class KeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Keyword");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTextAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTextSTRINGTerminalRuleCall_0_0 = (RuleCall)cTextAssignment_0.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Keyword:
		//	text=STRING "?"?;
		public ParserRule getRule() { return rule; }

		//text=STRING "?"?
		public Group getGroup() { return cGroup; }

		//text=STRING
		public Assignment getTextAssignment_0() { return cTextAssignment_0; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_0_0() { return cTextSTRINGTerminalRuleCall_0_0; }

		//"?"?
		public Keyword getQuestionMarkKeyword_1() { return cQuestionMarkKeyword_1; }
	}

	public class RuleCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRefRuleCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefRuleIDTerminalRuleCall_0_0_1 = (RuleCall)cRefRuleCrossReference_0_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cPlusSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//RuleCall:
		//	ref=[Rule] ("+" | "*")?;
		public ParserRule getRule() { return rule; }

		//ref=[Rule] ("+" | "*")?
		public Group getGroup() { return cGroup; }

		//ref=[Rule]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }

		//[Rule]
		public CrossReference getRefRuleCrossReference_0_0() { return cRefRuleCrossReference_0_0; }

		//ID
		public RuleCall getRefRuleIDTerminalRuleCall_0_0_1() { return cRefRuleIDTerminalRuleCall_0_0_1; }

		//("+" | "*")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"+"
		public Keyword getPlusSignKeyword_1_0() { return cPlusSignKeyword_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}
	
	
	private ModelElements pModel;
	private GrammarElements pGrammar;
	private RuleElements pRule;
	private ExpressionElements pExpression;
	private ElementElements pElement;
	private TermElements pTerm;
	private BracketsExpElements pBracketsExp;
	private KeywordElements pKeyword;
	private RuleCallElements pRuleCall;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	Grammar rules+=Rule*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Grammar:
	//	"grammar" gram=ID ";";
	public GrammarElements getGrammarAccess() {
		return (pGrammar != null) ? pGrammar : (pGrammar = new GrammarElements());
	}
	
	public ParserRule getGrammarRule() {
		return getGrammarAccess().getRule();
	}

	//Rule:
	//	name=ID ":" exp=Expression ";";
	public RuleElements getRuleAccess() {
		return (pRule != null) ? pRule : (pRule = new RuleElements());
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}

	//Expression:
	//	elements+=Element ("|" elements+=Element)*;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Element:
	//	terms+=Term+;
	public ElementElements getElementAccess() {
		return (pElement != null) ? pElement : (pElement = new ElementElements());
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//Term:
	//	rcall=RuleCall | bexp=BracketsExp | kword=Keyword;
	public TermElements getTermAccess() {
		return (pTerm != null) ? pTerm : (pTerm = new TermElements());
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}

	//BracketsExp:
	//	("(" Expression ")" | "[" Expression "]") ("+" | "*")?;
	public BracketsExpElements getBracketsExpAccess() {
		return (pBracketsExp != null) ? pBracketsExp : (pBracketsExp = new BracketsExpElements());
	}
	
	public ParserRule getBracketsExpRule() {
		return getBracketsExpAccess().getRule();
	}

	//Keyword:
	//	text=STRING "?"?;
	public KeywordElements getKeywordAccess() {
		return (pKeyword != null) ? pKeyword : (pKeyword = new KeywordElements());
	}
	
	public ParserRule getKeywordRule() {
		return getKeywordAccess().getRule();
	}

	//RuleCall:
	//	ref=[Rule] ("+" | "*")?;
	public RuleCallElements getRuleCallAccess() {
		return (pRuleCall != null) ? pRuleCall : (pRuleCall = new RuleCallElements());
	}
	
	public ParserRule getRuleCallRule() {
		return getRuleCallAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}

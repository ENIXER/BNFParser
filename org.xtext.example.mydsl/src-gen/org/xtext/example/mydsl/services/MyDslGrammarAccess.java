/*
* generated by Xtext
*/
package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGramAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cGramGrammarParserRuleCall_0_0 = (RuleCall)cGramAssignment_0.eContents().get(0);
		private final Assignment cRulesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRulesRuleParserRuleCall_1_0 = (RuleCall)cRulesAssignment_1.eContents().get(0);
		
		//Model:
		//	gram=Grammar rules+=Rule+;
		public ParserRule getRule() { return rule; }

		//gram=Grammar rules+=Rule+
		public Group getGroup() { return cGroup; }

		//gram=Grammar
		public Assignment getGramAssignment_0() { return cGramAssignment_0; }

		//Grammar
		public RuleCall getGramGrammarParserRuleCall_0_0() { return cGramGrammarParserRuleCall_0_0; }

		//rules+=Rule+
		public Assignment getRulesAssignment_1() { return cRulesAssignment_1; }

		//Rule
		public RuleCall getRulesRuleParserRuleCall_1_0() { return cRulesRuleParserRuleCall_1_0; }
	}

	public class GrammarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Grammar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGrammarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cGnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGnameIDTerminalRuleCall_1_0 = (RuleCall)cGnameAssignment_1.eContents().get(0);
		
		//Grammar:
		//	"grammar" gname=ID;
		public ParserRule getRule() { return rule; }

		//"grammar" gname=ID
		public Group getGroup() { return cGroup; }

		//"grammar"
		public Keyword getGrammarKeyword_0() { return cGrammarKeyword_0; }

		//gname=ID
		public Assignment getGnameAssignment_1() { return cGnameAssignment_1; }

		//ID
		public RuleCall getGnameIDTerminalRuleCall_1_0() { return cGnameIDTerminalRuleCall_1_0; }
	}

	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonColonEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		
		//Rule:
		//	"<" name=ID ">" "::=" expression=Expression;
		public ParserRule getRule() { return rule; }

		//"<" name=ID ">" "::=" expression=Expression
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }

		//"::="
		public Keyword getColonColonEqualsSignKeyword_3() { return cColonColonEqualsSignKeyword_3; }

		//expression=Expression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0() { return cExpressionExpressionParserRuleCall_4_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsElementParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElementsElementParserRuleCall_1_1_0 = (RuleCall)cElementsAssignment_1_1.eContents().get(0);
		
		//Expression:
		//	elements+=Element ("|" elements+=Element)*;
		public ParserRule getRule() { return rule; }

		//elements+=Element ("|" elements+=Element)*
		public Group getGroup() { return cGroup; }

		//elements+=Element
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }

		//Element
		public RuleCall getElementsElementParserRuleCall_0_0() { return cElementsElementParserRuleCall_0_0; }

		//("|" elements+=Element)*
		public Group getGroup_1() { return cGroup_1; }

		//"|"
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }

		//elements+=Element
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }

		//Element
		public RuleCall getElementsElementParserRuleCall_1_1_0() { return cElementsElementParserRuleCall_1_1_0; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Assignment cTermsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTermsTermParserRuleCall_0 = (RuleCall)cTermsAssignment.eContents().get(0);
		
		//Element:
		//	terms+=Term+;
		public ParserRule getRule() { return rule; }

		//terms+=Term+
		public Assignment getTermsAssignment() { return cTermsAssignment; }

		//Term
		public RuleCall getTermsTermParserRuleCall_0() { return cTermsTermParserRuleCall_0; }
	}

	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cKConstrAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cKConstrKeyConstrParserRuleCall_0_0 = (RuleCall)cKConstrAssignment_0.eContents().get(0);
		private final Assignment cRCallAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cRCallRuleCallParserRuleCall_1_0 = (RuleCall)cRCallAssignment_1.eContents().get(0);
		
		//Term:
		//	kConstr+=KeyConstr | rCall+=RuleCall;
		public ParserRule getRule() { return rule; }

		//kConstr+=KeyConstr | rCall+=RuleCall
		public Alternatives getAlternatives() { return cAlternatives; }

		//kConstr+=KeyConstr
		public Assignment getKConstrAssignment_0() { return cKConstrAssignment_0; }

		//KeyConstr
		public RuleCall getKConstrKeyConstrParserRuleCall_0_0() { return cKConstrKeyConstrParserRuleCall_0_0; }

		//rCall+=RuleCall
		public Assignment getRCallAssignment_1() { return cRCallAssignment_1; }

		//RuleCall
		public RuleCall getRCallRuleCallParserRuleCall_1_0() { return cRCallRuleCallParserRuleCall_1_0; }
	}

	public class KeyConstrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KeyConstr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSCharAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSCharSTRINGTerminalRuleCall_0_0 = (RuleCall)cSCharAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cECharAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cECharSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cECharAssignment_1_1.eContents().get(0);
		
		//KeyConstr:
		//	SChar=STRING (".." EChar=STRING)?;
		public ParserRule getRule() { return rule; }

		//SChar=STRING (".." EChar=STRING)?
		public Group getGroup() { return cGroup; }

		//SChar=STRING
		public Assignment getSCharAssignment_0() { return cSCharAssignment_0; }

		//STRING
		public RuleCall getSCharSTRINGTerminalRuleCall_0_0() { return cSCharSTRINGTerminalRuleCall_0_0; }

		//(".." EChar=STRING)?
		public Group getGroup_1() { return cGroup_1; }

		//".."
		public Keyword getFullStopFullStopKeyword_1_0() { return cFullStopFullStopKeyword_1_0; }

		//EChar=STRING
		public Assignment getECharAssignment_1_1() { return cECharAssignment_1_1; }

		//STRING
		public RuleCall getECharSTRINGTerminalRuleCall_1_1_0() { return cECharSTRINGTerminalRuleCall_1_1_0; }
	}

	public class RuleCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefRuleCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefRuleIDTerminalRuleCall_1_0_1 = (RuleCall)cRefRuleCrossReference_1_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//RuleCall:
		//	"<" ref=[Rule] ">";
		public ParserRule getRule() { return rule; }

		//"<" ref=[Rule] ">"
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//ref=[Rule]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }

		//[Rule]
		public CrossReference getRefRuleCrossReference_1_0() { return cRefRuleCrossReference_1_0; }

		//ID
		public RuleCall getRefRuleIDTerminalRuleCall_1_0_1() { return cRefRuleIDTerminalRuleCall_1_0_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
	}
	
	
	private ModelElements pModel;
	private GrammarElements pGrammar;
	private RuleElements pRule;
	private ExpressionElements pExpression;
	private ElementElements pElement;
	private TermElements pTerm;
	private KeyConstrElements pKeyConstr;
	private RuleCallElements pRuleCall;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	gram=Grammar rules+=Rule+;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Grammar:
	//	"grammar" gname=ID;
	public GrammarElements getGrammarAccess() {
		return (pGrammar != null) ? pGrammar : (pGrammar = new GrammarElements());
	}
	
	public ParserRule getGrammarRule() {
		return getGrammarAccess().getRule();
	}

	//Rule:
	//	"<" name=ID ">" "::=" expression=Expression;
	public RuleElements getRuleAccess() {
		return (pRule != null) ? pRule : (pRule = new RuleElements());
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}

	//Expression:
	//	elements+=Element ("|" elements+=Element)*;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Element:
	//	terms+=Term+;
	public ElementElements getElementAccess() {
		return (pElement != null) ? pElement : (pElement = new ElementElements());
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//Term:
	//	kConstr+=KeyConstr | rCall+=RuleCall;
	public TermElements getTermAccess() {
		return (pTerm != null) ? pTerm : (pTerm = new TermElements());
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}

	//KeyConstr:
	//	SChar=STRING (".." EChar=STRING)?;
	public KeyConstrElements getKeyConstrAccess() {
		return (pKeyConstr != null) ? pKeyConstr : (pKeyConstr = new KeyConstrElements());
	}
	
	public ParserRule getKeyConstrRule() {
		return getKeyConstrAccess().getRule();
	}

	//RuleCall:
	//	"<" ref=[Rule] ">";
	public RuleCallElements getRuleCallAccess() {
		return (pRuleCall != null) ? pRuleCall : (pRuleCall = new RuleCallElements());
	}
	
	public ParserRule getRuleCallRule() {
		return getRuleCallAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}

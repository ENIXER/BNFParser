/*
 * generated by Xtext
 */
package net.unicoen.testcasegenerator.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import net.unicoen.testcasegenerator.testCaseGenerator.File
import net.unicoen.testcasegenerator.testCaseGenerator.TestCase
import net.unicoen.testcasegenerator.testCaseGenerator.NodeDeclaration
import net.unicoen.testcasegenerator.testCaseGenerator.NodeValue
import net.unicoen.testcasegenerator.testCaseGenerator.NodeArchitecture
import net.unicoen.testcasegenerator.testCaseGenerator.List
import net.unicoen.testcasegenerator.testCaseGenerator.ChildDeclaration
import java.util.ArrayDeque
import java.lang.reflect.ParameterizedType
import java.util.HashMap

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class TestCaseGeneratorGenerator implements IGenerator {

	private val stack = new ArrayDeque<String>
	private val nodeCount = new HashMap<String, Integer>

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		resource.allContents.filter(File).forEach [
			fsa.generateFile(it.name.name + ".xtend", it.compile)
		]
	}

	private def compile(File file) '''
		«generateImports»
		
		class «file.name.name» extends MapperTest {
			val mapper = new «file.target.name»(true)
			
			«FOR it : file.cases»
				«it.compile»
			«ENDFOR»
		}
	'''

	private def compile(TestCase testCase) {
		val ret = '''
			@Test
			def void «testCase.name»() {
				val actual = mapper.parse("«testCase.code.body.name.replace("\"", "\\\"")»")
				
				«testCase.node.compile»
				evaluate(«stack.pop», actual)
			}
			
		'''
		stack.clear
		nodeCount.clear
		ret
	}

	private def compile(NodeDeclaration node) {
		node.value.compile(null)
	}

	private def Object compile(NodeValue value, Class<?> castType) {
		if (value.arch != null) {
			value.arch.compile
		} else if (value.list != null) {
			value.list.compile(castType)
		} else {
			value.literal.compile
		}
	}

	private def compile(NodeArchitecture arch) {
		val cls = Class.forName("net.unicoen.node." + arch.nodeType)
		val ret1 = '''
			«FOR child : arch.children»
				«child.compile(cls)»
			«ENDFOR»
		'''

		val localStack = new ArrayDeque<String>
		for (child : arch.children) {
			localStack.push(stack.pop)
		}

		nodeCount.put(arch.nodeType, if(nodeCount.containsKey(arch.nodeType)) nodeCount.get(arch.nodeType) + 1 else 0)
		val nodeName = arch.nodeType.simpleName + nodeCount.get(arch.nodeType)

		val ret2 = '''
			val «nodeName» = new «arch.nodeType»
			«FOR child : arch.children»
				«nodeName».«child.fieldName» = «localStack.pop»
			«ENDFOR»
		'''
		stack.push(nodeName)
		'''
			«ret1»
			«ret2»
			
		'''
	}

	private def compile(ChildDeclaration child, Class<?> nodeType) {
		val field = nodeType.getField(child.fieldName)
		child.value.compile(
			if (field.genericType instanceof ParameterizedType)
				(field.genericType as ParameterizedType).actualTypeArguments.get(0) as Class<?>
			else
				null)

	}

	private def compile(List list, Class<?> castType) {
		val lst = "list"
		val ret1 = '''
			«FOR v : list.value»
				«v.compile(null)»
			«ENDFOR»
		'''
		val localStack = new ArrayDeque<String>
		for (v : list.value) {
			localStack.push(stack.pop)
		}
		nodeCount.put(lst, if(nodeCount.containsKey(lst)) nodeCount.get(lst) + 1 else 0)
		val nodeName = lst + nodeCount.get(lst)

		val ret2 = '''
		val «nodeName» = #[«FOR v : list.value»«localStack.pop»«if (v.arch != null &&
			v.arch.nodeType != castType.simpleName) {
			" as " + castType.simpleName
		} else {
			""
		}»«IF list.value.findLast[true] != v», «ENDIF»«ENDFOR»]'''
		stack.push(nodeName)
		'''
			«ret1»
			«ret2»
			
		'''
	}

	private def compile(String literal) {
		val str = "str"
		nodeCount.put(str, if(nodeCount.containsKey(str)) nodeCount.get(str) + 1 else 0)
		val nodeName = str + nodeCount.get(str)
		
		val ret = '''
			val «nodeName» = «literal»
			
		'''
		stack.push(nodeName)
		ret
	}

	private def generateImports() '''
		package net.unicoen.mapper
		
		import net.unicoen.node.*
		import org.junit.Test
	'''

	private def simpleName(String str){
		str.substring(3).toFirstLower
	}
}
